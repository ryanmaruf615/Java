downloads-organizer/
â”‚
â”œâ”€â”€ README.md              # Quick project description
â”œâ”€â”€ config.yaml            # Simple extensionâ†’category mapping
â”‚
â””â”€â”€ src/
    â””â”€â”€ main/
        â””â”€â”€ java/
            â””â”€â”€ com/
                â””â”€â”€ organizer/
                    â”œâ”€â”€ App.java            # Entry point (main method)
                    â”œâ”€â”€ FileScanner.java    # List files in Downloads
                    â”œâ”€â”€ ExtensionMapper.java# Decide category based on extension
                    â”œâ”€â”€ FileMover.java      # Create folders + move files
                    â””â”€â”€ FileOrganizer.java  # Orchestrates everything

ðŸ”‘ What each class does (MVP)

App.java

Starts the program.

Defines path to Downloads.

Calls FileOrganizer to run everything.

FileScanner.java

Scans the folder.

Returns a list of files.

ExtensionMapper.java

Reads the file extension.

Decides which folder (category) it belongs to.

Uses a hardcoded map at first (later: move to config.yaml).

FileMover.java

Creates category folders if missing.

Moves files into the correct folder.

Simple conflict handling â†’ rename with (1).

FileOrganizer.java

Core controller.

Uses FileScanner â†’ ExtensionMapper â†’ FileMover.

# ðŸ“‚ Project Structure (Downloads Organizer)

```
downloads-organizer/
â”‚
â”œâ”€â”€ README.md                 # Project description & usage guide
â”œâ”€â”€ pom.xml / build.gradle    # Build tool config (choose Maven or Gradle)
â”œâ”€â”€ config/                   
â”‚   â””â”€â”€ organizer.yaml         # External config file (mapping, rules, etc.)
â”œâ”€â”€ logs/                     # Log output (ignored in git)
â”‚
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ main/
â”‚   â”‚   â”œâ”€â”€ java/
â”‚   â”‚   â”‚   â””â”€â”€ com/
â”‚   â”‚   â”‚       â””â”€â”€ organizer/
â”‚   â”‚   â”‚           â”œâ”€â”€ App.java              # Entry point (main method)
â”‚   â”‚   â”‚           â”‚
â”‚   â”‚   â”‚           â”œâ”€â”€ config/
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ ConfigLoader.java # Loads and parses config
â”‚   â”‚   â”‚           â”‚   â””â”€â”€ Config.java       # Holds config fields
â”‚   â”‚   â”‚           â”‚
â”‚   â”‚   â”‚           â”œâ”€â”€ core/
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ FileScanner.java  # Lists files in target folder
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ FileOrganizer.java# Main logic: categorize & move
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ FileMover.java    # Handles moving + conflicts
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ ExtensionMapper.java # Maps ext â†’ category
â”‚   â”‚   â”‚           â”‚   â””â”€â”€ ConflictHandler.java # Rename / overwrite / skip
â”‚   â”‚   â”‚           â”‚
â”‚   â”‚   â”‚           â”œâ”€â”€ util/
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ Logger.java       # Simple logging wrapper
â”‚   â”‚   â”‚           â”‚   â””â”€â”€ FileUtils.java    # Common helper methods
â”‚   â”‚   â”‚           â”‚
â”‚   â”‚   â”‚           â””â”€â”€ watcher/
â”‚   â”‚   â”‚               â””â”€â”€ FolderWatcher.java # (optional) live monitoring
â”‚   â”‚   â”‚
â”‚   â”‚   â””â”€â”€ resources/
â”‚   â”‚       â””â”€â”€ logback.xml   # Logging framework config (if using SLF4J)
â”‚   â”‚
â”‚   â””â”€â”€ test/
â”‚       â””â”€â”€ java/
â”‚           â””â”€â”€ com/
â”‚               â””â”€â”€ organizer/
â”‚                   â”œâ”€â”€ FileScannerTest.java
â”‚                   â”œâ”€â”€ FileOrganizerTest.java
â”‚                   â”œâ”€â”€ ConflictHandlerTest.java
â”‚                   â””â”€â”€ ExtensionMapperTest.java
â”‚
â””â”€â”€ target/ or build/          # Compiled output (ignored in git)
```

---

# ðŸ”‘ Explanation of Folders & Classes

### **Main app entry**

* `App.java` â†’ Starts program, loads config, calls `FileOrganizer`.

### **Config handling**

* `ConfigLoader.java` â†’ Reads `organizer.yaml` (or JSON/properties).
* `Config.java` â†’ Plain object with fields like `scanFolder`, `categories`, `conflictStrategy`.

### **Core logic**

* `FileScanner.java` â†’ Gets list of files from Downloads.
* `ExtensionMapper.java` â†’ Decides category based on extension.
* `FileOrganizer.java` â†’ High-level orchestration (calls scanner, mapper, mover).
* `FileMover.java` â†’ Actually moves files into folders.
* `ConflictHandler.java` â†’ Ensures safe handling of name clashes.

### **Utils**

* `Logger.java` â†’ Wraps logging framework.
* `FileUtils.java` â†’ Common helper functions (e.g., get extension, check hidden, safe rename).

### **Watcher (optional)**

* `FolderWatcher.java` â†’ Uses Java NIO WatchService for real-time monitoring.

### **Tests**

* Unit tests for each class.
* Sandbox folder tests for integration.

---

# ðŸš€ Workflow

1. `App.java` starts â†’ loads `ConfigLoader`.
2. `ConfigLoader` returns `Config`.
3. `FileScanner` scans target folder.
4. For each file:

   * `ExtensionMapper` decides category.
   * `FileMover` moves it (asking `ConflictHandler` if clash).
5. `Logger` records actions.
